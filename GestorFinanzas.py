import os #para usarla en la funcoi√≥n de limpiarConsola

#Categor√≠as para gastos
categorias = ["Alimentaci√≥n", "Transporte", "Entretenimiento", "Salud", "Ropa", "Hogar", "Educaci√≥n", "Viajes", "Mascotas"]
saldo = 0.0

#Lista para guardar las transacciones que se hacen (guarda diccionarios)
transacciones = []

# Limpia la consola dependiendo del sistema operativo
# 'cls' para Windows, 'clear' para Unix (Linux/macOS)
def limpiarConsola():
    os.system("cls" if os.name == "nt" else "clear")   

def Enter():
    input("Presione Enter para continuar...")



def guardarTransaccion(tipo, monto, categoria):

    global saldo

    #definimos el diccionario
    transaccion = {
        "tipo": tipo,
        "monto": monto,
        "categoria": categoria
    }

    #Guardamos el diccionario transaccion a la lista transacciones
    transacciones.append(transaccion)

    #Seg√∫n el tipo de transacci√≥n (ingreso/gasto) se le aumenta o descuenta al saldo
    if tipo == "+":
        saldo += monto
    elif tipo == "-":
        saldo -= monto



def agregarGasto():

    limpiarConsola()
    print("---‚ú® Agregar Gasto ‚ú®---\n")

    while True:
        try:
            monto = float(input("Ingrese el monto: "))
            if monto < 0: #Se verifica que el usuario ponga valores positivos
                print("‚úñÔ∏è Solo se aceptan valores positivos")
            else:
                break
        except ValueError:
            print("Solo se permiten n√∫meros üëÄ")


    print("Categor√≠as disponibles:")

    #imprime la lista que tenemos de categorias
    for i in range(len(categorias)):
        print(f"{i + 1}. {categorias[i]}")


    while True:
    
        try:
            categoria = int(input("Seleccione la categor√≠a (n√∫mero): ")) - 1 #restamos 1 porque en el momento que mostramos las categor√≠as con su respectivo n√∫mero le sumamos 1, entonces se le resta 1 para acceder a la posici√≥n correcta de la lista categorias

            if categoria < 0 or categoria >= len(categorias): #Verificamos que el usuario ponga una categor√≠a existente
                print("Categor√≠a no v√°lida. Intentelo de nuevo")
              
            else:
                #imprimimos el monto y la categor√≠a
                print(f"Monto: {monto}\nCategor√≠a: {categorias[categoria]}")

                #Guardamos la transacci√≥n
                guardarTransaccion("-", monto, categorias[categoria])
                Enter()
                break

        except ValueError:
            #Verificamos que el usuario solo ponga n√∫meros
            print("Solo se permiten n√∫meros üëÄ")
            Enter()
        


def agregarIngreso():

    limpiarConsola()

    print("---‚ú® Agregar Ingreso ‚ú®---\n")

    while True:
        try:
            monto = float(input("Ingrese el monto: "))
            if monto < 0: #Se verifica que el usuario ponga valores positivos
                print("‚úñÔ∏è Solo se aceptan valores positivos")
            else:
                #Mostramos el monto y guardamos la transacci√≥n
                print(f"Monto: {monto}")
                guardarTransaccion("+", monto, "Ingreso")
                Enter()
                break
        except ValueError:
            #Verificamos que el usuario solo ponga n√∫meros
            print("Solo se permiten n√∫meros üëÄ")

    



def consultarSaldo():
    global saldo

    limpiarConsola()
    if saldo < 0:
        #Significa que el usuario debe dinero, la funci√≥n abs muestra el valor absoluto del saldo
        print(f"Pilas, debes ${abs(saldo)} üëÄ")
    else:
        print(f"Saldo actual: ${saldo}")
    Enter()


def historial(tipo):

    limpiarConsola()

    global transacciones

    #Definimos el t√≠tulo del historial dependiendo del tipo de transacci√≥n
    if tipo == "-":
        tipoTransaccion = "Gastos"
    elif tipo == "+":
        tipoTransaccion = "Ingresos"

    print(f"---‚ú® Historial de {tipoTransaccion} ‚ú®---")

    #recorremos la lista de transacciones para filtrar solo las del tipo solicitado
    for transaccion in transacciones:

        #ac√° mostramos el tipo de transacci√≥n dependiendo de lo que tenemos en el diccionario si el tipo de la transacci√≥n coincide con el tipo recibido (gasto o ingreso)
        if transaccion["tipo"] == tipo:
            print(f"üî∏ Categor√≠a: {transaccion['categoria']}, Monto: {transaccion['monto']}")

    Enter()



def verHistorial():
    
    global transacciones

    while True:
        try:
            limpiarConsola()
            print("---‚ú® Historial de Transacciones ‚ú®---\n")
            print("1. Gastos\n2. Ingresos\n3. General\n4. Volver al men√∫ principal")
            opcion = int(input("Seleccione una opci√≥n: "))
            
            #Llamamos la funcion historial con su par√°metro correspondiente
            if opcion == 1:
                historial("-")
            elif opcion == 2:
                historial("+")
            elif opcion == 3:
                limpiarConsola()
                print("\n---‚ú® Historial General ‚ú®---")

                #mostramos todas las transacciones de la lista
                for transaccion in transacciones:
                    print(f"üî∏ Categor√≠a: {transaccion['categoria']}, Monto: {transaccion['monto']}")
                Enter()
            elif opcion == 4:
                #Salimos del bucle para vovler al menu principal
                break
            else:
                print("‚úñÔ∏è Opci√≥n no v√°lida. Ingrese un n√∫mero del 1 al 4.")
                Enter()

        except ValueError:
            #Verificamos que el usuario ponga solo n√∫meros
            print("üëÄ Solo se permiten n√∫meros.")
            Enter()



def Categorias():
    global categorias
    while True:
        limpiarConsola()
        print("\n---‚ú® Categorias ‚ú®---")
        print("1. Ver categor√≠as\n2. Agregar Categor√≠a\n3. Volver al men√∫ principal")
        try:
            opcion = int(input("Seleccione una opci√≥n: "))
            if opcion == 1:
                limpiarConsola()
                #imprimimos todas las categorias de la lista
                print("Categor√≠as disponibles:")
                for categoria in categorias:
                    print(f"üî∏ {categoria}")
                Enter()

            elif opcion == 2:
                agregarCategoria() 

            elif opcion == 3:
                break  
            else:
                print("‚úñÔ∏è Opci√≥n no v√°lida. Ingrese un n√∫mero del 1 al 3")
                Enter()

        except ValueError:
            print("Solo se permiten n√∫meros üëÄ")
            Enter()   


def agregarCategoria():
    limpiarConsola()

    #imprimimos todas las categor√≠as 
    global categorias
    print("Categor√≠as disponibles:")
    for i in categorias:
        print(f"üî∏ {i}")

    while True:
        categoria = input("Ingrese el nombre de la nueva categor√≠a: ")

        #verificamos que no sea una cadena vac√≠a
        if categoria == "":
            print("‚úñÔ∏è Categor√≠a inv√°lida. No puede estar vac√≠a.")

        #verificamos que no ponga una categor√≠a existente
        elif categoria in categorias:
            print("‚ö†Ô∏è Esa categor√≠a ya existe. Intente con otro nombre.")

        #Guardamos la categor√≠a nueva en la lista categor√≠as
        else:
            categorias.append(categoria)
            print(f"‚úÖ Categor√≠a '{categoria}' agregada exitosamente.")
            Enter()
            break  # Salimos del bucle solo si todo sali√≥ bien

        Enter()



def menu():

    global categorias

    while True:
        try:
            limpiarConsola()
            print("\n---‚ú® Men√∫ Principal ‚ú®---")
            print("1. Agregar gasto\n2. Agregar ingreso\n3. Consultar saldo actual\n4. Ver historial\n5. Categor√≠as\n6. Salir")


            opcion = int(input("Seleccione una opci√≥n: "))

            if opcion < 1 or opcion > 6:
                print("Opci√≥n no v√°lida.")
                Enter()

            elif opcion == 1:
                agregarGasto()
            elif opcion == 2:
                agregarIngreso()
            elif opcion == 3:
                consultarSaldo()
            elif opcion == 4:
                verHistorial()
            elif opcion == 5:
                Categorias()
            elif opcion == 6:
                print("Saliendo del programa...")
                exit(0)
        except ValueError:
            print("Solo se aceptan n√∫meros üëÄ")
            Enter()
            
menu()